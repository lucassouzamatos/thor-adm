---

- name: define control variable for saving to cache later on
  set_fact:
    net_found: no

- name: looking up for your network  
  vars:
    provider_url: "{{ whois_provider + '/' + my_ip }}"
  set_fact:
    whois_result: "{{ lookup('url', provider_url) | string | from_json }}"

- name: first cidr attempt - handle
  set_fact:
    my_handle: "{{ whois_result | json_query('handle') | default('') }}"

- name: check wheter handle contains a network address
  set_fact:
    check_handle: '{{ my_handle | regex_search("\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b\/\d") }}'

- name: define the handle as our network
  set_fact:
    my_cidr: "{{ my_handle }}"
    net_found: yes
  when: check_handle != ""

- block:
  - name: second attempt - cidrs
    set_fact:
      my_network_mask: "{{ whois_result | json_query('cidr0_cidrs[0].length') }}"

  - name: define found network cidr as our network
    set_fact:
      my_cidr: "{{ my_ip + '/' + my_network_mask }}"
      net_found: yes
    when: my_network_mask != ""

  - block: 
    # we can do better...
    - debug:
        msg: "{{ item }}"
      vars:
        first_ip: "{{ whois_result | json_query('startAddress') }}"
        last_ip: "{{ whois_result | json_query('endAddress') }}"
      with_items:
        - CIDR not found, falling back to ip address...
        - "Discovered the range: {{ first_ip }} - {{ last_ip }}"
        - You can overwrite [my_cidr] variable with a calculated network CIDR (e.g. 10.100.1.0/22).

    - name: fallback to ip address
      set_fact:
        my_cidr: "{{ my_ip + '/' + my_mask }}"
    when: my_network_mask == ""
  when: my_cidr is not defined

- name: save network to cache
  copy:
    dest: "{{ net_cache_path }}"
    content: "{{ (net_cache_content + new_content) | to_nice_json }}"
  vars:
      new_content:
        - ip: "{{ my_ip }}"
          cidr: "{{ my_cidr }}"
  when: net_found